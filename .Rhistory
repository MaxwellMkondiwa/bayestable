.create.mcmcfit<-function (mcmc, y, ppredict=NULL){
mcmcfit<-list("samples"=mcmc,
"outcomes"=y,
"ppredict"=ppredict)
class(mcmcfit)<-"mcmcfit"
return(mcmcfit)
}
source("help_funs.r")
library(bayestable)
library(bayestable)
library(bayestable)
library(bayestable)
library(rjags)
library(coda)
library(dplyr)
library(ggplot2)
library(reshape2)
library(bayesplot)
N<-100
x1<-rnorm(N)
x2<-rnorm(N)
beta<-c(0.3,-0.3)
y<- 0.1 + beta[1]*x1 + beta[2]*x2+rnorm(N)
library(rjags)
library(coda)
library(dplyr)
library(ggplot2)
library(reshape2)
library(bayesplot)
library(mcmcplots)
N<-100
x1<-rnorm(N)
x2<-rnorm(N)
beta<-c(0.3,-0.3)
y<- 0.1 + beta[1]*x1 + beta[2]*x2+rnorm(N,0)
code1<-"
model{
for (i in 1:N){
y[i] ~ dnorm(mu[i], sigma)
mu[i]<-a
}
a ~ dnorm(0, 0.001)
sigma <- pow(tau, -2)
tau ~ dunif(0,100)
}
"
code2<-"
model{
for (i in 1:N){
y[i] ~ dnorm(mu[i], sigma)
mu[i]<-a+beta1*x1[i]
}
a ~ dnorm(0, 0.001)
beta1 ~ dnorm(0,0.001)
sigma <- pow(tau, -2)
tau ~ dunif(0,100)
}
"
code3<-"
model{
for (i in 1:N){
y[i] ~ dnorm(mu[i], sigma)
mu[i]<-a+beta1*x1[i]+beta2*x2[i]
}
a ~ dnorm(0, 0.001)
beta1 ~ dnorm(0,0.001)
beta2 ~ dnorm(0,0.001)
sigma <- pow(tau, -2)
tau ~ dunif(0,100)
}
"
model1.spec<-textConnection(code1)
jags1<-jags.model(model1.spec, data = list('N'=N,
'y'=y), quiet = T)
samples1<-coda.samples(jags1, variable.names = c("a"),
n.iter=1000,
nchain=4)
samples1.rep<-coda.samples(jags1, variable.names = c("mu"),
n.iter=1000,
nchain=4)
model2.spec<-textConnection(code2)
jags2<-jags.model(model2.spec, data = list('x1'=x1,
'N'=N,
'y'=y), quiet = T)
samples2<-coda.samples(jags2, variable.names = c("a", "beta1"),
n.iter=1000,
nchain=4)
samples2.rep<-coda.samples(jags2, variable.names = c("mu"),
n.iter=1000,
nchain=4)
model3.spec<-textConnection(code3)
jags3<-jags.model(model3.spec, data = list('x1'=x1,
'x2'=x2,
'N'=N,
'y'=y), quiet = T)
samples3<-coda.samples(jags3, variable.names = c("a", "beta1", "beta2"),
n.iter=1000,
nchain=4)
samples3.rep<-coda.samples(jags3, variable.names = c("mu"),
n.iter=1000,
nchain=4)
datalist<-list(samples1, samples2, samples3)
ylist<-list(y,y,y)
yreplist<-list(samples1.rep, samples2.rep, samples3.rep)
bayes.table(datalist,ylist)
library(bayestable)
bayes.table(datalist,ylist)
bayes.table(datalist,ylist)
library(assertthat)
bayes.table(datalist,ylist)
library(bayestable)
bayes.table(datalist,ylist)
library(texreg)
bayes.table(datalist,ylist)
low.hpdi.list
summary(sample1)
bayes.table(samples1,y)
bayes.table(list(samples1),list(y))
library(bayestable)
bayes.table(list(samples1),list(y))
bayes.table(list(samples1, samples2, samples3),list(y,y,y))
library(bayestable)
bayes.table(list(samples1, samples2, samples3),list(y,y,y), HPDI=T)
p1<-bayes.table(list(samples1, samples2, samples3),list(y,y,y), HPDI=T)
p1
gsub('\*','', p1)
gsub("\*","", p1)
gsub("*","", p1)
gsub("[\\*]","", p1)
gsub("[\*]","", p1)
gsub("[*]","", p1)
bayes.table(list(samples1, samples2, samples3),list(y,y,y), HPDI=T)
gsub("[^{}]","", p1)
p1<-bayes.table(list(samples1, samples2, samples3),list(y,y,y), HPDI=T)
gsub("[^{}]","", p1)
gsub("[\^{}]","", p1)
gsub("[\\^{}]","", p1)
gsub("[^{}]","", p1)
gsub("[\^\{\}]","", p1)
gsub("[\\^\{\}]","", p1)
gsub("[\\^\\{\\}]","", p1)
gsub("[{}]","", p1)
gsub("[{}]","", p1)
p2<-gsub("[{}]","", p1)
p2
p2<-gsub("^","", p1)
p2
p2<-gsub("[^]","", p1)
p2<-gsub("[\^]","", p1)
?gsub
p2<-gsub("[\^]","", p1, fixed=T)
p2<-gsub("^","", p1, fixed=T)
p2
p1<-bayes.table(list(samples1, samples2, samples3),list(y,y,y), HPDI=T)
p2<-gsub("^{}","", p1, fixed=T)
p2
bayes.table(list(samples1, samples2, samples3),list(y,y,y), HPDI=T)
bayes.table(list(samples1, samples2, samples3),list(y,y,y), HPDI=T,
custom.coef.map = list("a"="Intercept",
"beta1"="GDP",
"beta2"="Polity"))
bayes.table(list(samples1, samples2, samples3),list(y,y,y), HPDI=T,
custom.coef.map = list("a"="Intercept",
"beta1"="GDP",
"beta2"="Polity"), HPDI.prob = 0.99)
bayes.table(list(samples1, samples2, samples3),list(y,y,y), HPDI=T,
custom.coef.map = list("a"="Intercept",
"beta1"="GDP",
"beta2"="Polity"), HPDI.prob = 0.97)
bayes.table(list(samples1, samples2, samples3),
list(y,y,y),
yreplist = list(samples1.rep, samples2.rep,samples3.rep) , HPDI=T,
custom.coef.map = list("a"="Intercept",
"beta1"="GDP",
"beta2"="Polity"), HPDI.prob = 0.97)
bayes.table(list(samples1, samples2, samples3),
list(y,y,y),
yreplist = list(samples1.rep, samples2.rep,samples3.rep) , HPDI=T,
custom.coef.map = list("a"="Intercept",
"beta1"="GDP",
"beta2"="Polity"), include.rsquared = T, HPDI.prob = 0.97)
bayes.table(list(samples1, samples2, samples3),
list(y,y,y),
yreplist = list(samples1.rep, samples2.rep,samples3.rep) , HPDI=F,
custom.coef.map = list("a"="Intercept",
"beta1"="GDP",
"beta2"="Polity"), include.rsquared = T, HPDI.prob = 0.97)
?texreg
bayes.table(list(samples1, samples2, samples3),
list(y,y,y),
yreplist = list(samples1.rep, samples2.rep,samples3.rep) , HPDI=F,
custom.coef.map = list("a"="Intercept",
"beta1"="GDP",
"beta2"="Polity"), include.rsquared = T, HPDI.prob = 0.97)
bayes.table(list(samples1, samples2, samples3),
list(y,y,y),
yreplist = list(samples1.rep, samples2.rep,samples3.rep) , HPDI=F,
custom.coef.map = list("a"="Intercept",
"beta1"="GDP",
"beta2"="Polity"), include.rsquared = T, HPDI.prob = 0.97, output="word")
bayes.table(list(samples1, samples2, samples3),
list(y,y,y),
yreplist = list(samples1.rep, samples2.rep,samples3.rep) , HPDI=F,
custom.coef.map = list("a"="Intercept",
"beta1"="GDP",
"beta2"="Polity"), include.rsquared = T, HPDI.prob = 0.97, output="word")
assertthat::assert_that(!assert_that::is.null(datalist))
assertthat::assert_that(!assertthat::is.null(datalist))
assertthat::assert_that(!is.null(datalist))
?is.null
?not_empty
?are_equal
for (i in 1:length(ylist)){
assertthat::assert_that(assertthat::noNA(ylist[[i]]))
}
install.packages("roxygen2")
devtools::document()
devtools::document()
?calc.r.sq
devtools::document()
?calc.geweke
bayes.table(list(samples1, samples2, samples3),
list(y,y,y),
yreplist = list(samples1.rep, samples2.rep,samples3.rep) , HPDI=F,
custom.coef.map = list("a"="Intercept",
"beta1"="GDP",
"beta2"="Polity"), include.rsquared = T, HPDI.prob = 0.97, output="word")
library(bayestable)
bayes.table(list(samples1, samples2, samples3),
list(y,y,y),
yreplist = list(samples1.rep, samples2.rep,samples3.rep) , HPDI=F,
custom.coef.map = list("a"="Intercept",
"beta1"="GDP",
"beta2"="Polity"), include.rsquared = T, HPDI.prob = 0.97, output="word")
"beta2"="Polity"), include.rsquared = T, HPDI.prob = 0.97, output="word")
bayes.table(list(samples1, samples2, samples3),
.
)
"beta2"="Polity"), include.rsquared = T, HPDI.prob = 0.97, output="word")
bayes.table(list(samples1, samples2, samples3),
list(y,y,y),
yreplist = list(samples1.rep, samples2.rep,samples3.rep) , HPDI=F,
custom.coef.map = list("a"="Intercept",
"beta1"="GDP",
"beta2"="Polity"), include.rsquared = T, HPDI.prob = 0.97, output="word")
bayes.table(list(samples1, samples2, samples3),
list(y,y,y),
yreplist = list(samples1.rep, samples2.rep,samples3.rep) , HPDI=T,
custom.coef.map = list("a"="Intercept",
"beta1"="GDP",
"beta2"="Polity"), include.rsquared = T, HPDI.prob = 0.97, output="word")
bayes.table(list(samples1, samples2, samples3),
list(y,y,y),
yreplist = list(samples1.rep, samples2.rep,samples3.rep) , HPDI=T,
custom.coef.map = list("a"="Intercept",
"beta1"="GDP",
"beta2"="Polity"), include.rsquared = T, HPDI.prob = 0.97, output="word")
devtools::document()
?bayes.table
?texreg
devtools::document()
?bayes.table
devtools::document()
devtools::document()
devtools::document()
?bayes.table
devtools::document()
?bayes.table
devtools::document()
?bayes.table
devtools::document()
devtools::document()
?bayes.table
devtools::document()
?bayes.table
?bayes.table
devtools::document()
?bayes.table
devtools::document()
?bayes.table
devtools::document()
detach(bayestable)
detach("bayestable")
detach("package:bayestable", unload=TRUE)
